<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>P_Wang&#39;s Blog</title>
  
  <subtitle>自己选择的路，跪着也要走完。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tle666.github.io/"/>
  <updated>2019-02-23T02:53:54.055Z</updated>
  <id>http://tle666.github.io/</id>
  
  <author>
    <name>P_Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[USACO15DEC] 最大流</title>
    <link href="http://tle666.github.io/2019/02/23/%5BUSACO15DEC%5D%20%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    <id>http://tle666.github.io/2019/02/23/[USACO15DEC] 最大流/</id>
    <published>2019-02-23T02:52:20.000Z</published>
    <updated>2019-02-23T02:53:54.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a><strong>Description</strong></h1><p>给你一颗$n$个结点的树。</p><p>有$k$个操作，每个操作有两个数$u$和$v$，使$u$到$v$路径上的所有点权都加一。</p><p>最后输出最大的点权值。</p><p>对于$100$%的的数据，满足$2 \leq n \leq 50000,\ 1 \leq k \leq 100000$</p><a id="more"></a><p><a href="https://www.luogu.org/problemnew/show/P3128" target="_blank" rel="noopener">题目链接戳这里</a></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><strong>Solution</strong></h1><p>树链剖分模板题！<del><a href="https://tle666.github.io/2019/02/02/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%E8%AF%A6%E8%A7%A3/">没学过的戳这里</a></del></p><p>对于每次操作$u$，$v​$，我们只需要执行一次树链剖分里最基本的修改操作：路径修改即可。</p><p>最后你再用基本操作$query$求一次区间点权最大值就A了啊！</p><p><del>详见代码</del></p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a><strong>Code</strong></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100100</span></span><br><span class="line"><span class="keyword">int</span> n, k, tot, wson[MAXN], dep[MAXN], fa[MAXN], dfn[MAXN], pre[MAXN], size[MAXN], top[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> <span class="comment">// 存图</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    edge *next;</span><br><span class="line">&#125; epool[MAXN &lt;&lt; <span class="number">1</span>], *h[MAXN], *ecnt = epool;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> <span class="comment">// 存树</span></span><br><span class="line">    <span class="keyword">int</span> left, right, Max, tag;</span><br><span class="line">    node *ls, *rs;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">seta</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; tag += x, Max += x;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">upd</span><span class="params">()</span> </span>&#123; Max = max(ls-&gt;Max, rs-&gt;Max);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tag) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ls) ls-&gt;seta(tag);</span><br><span class="line">            <span class="keyword">if</span>(rs) rs-&gt;seta(tag);</span><br><span class="line">            tag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; pool[MAXN &lt;&lt; <span class="number">3</span>], *root, *cnt = pool;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; <span class="comment">// 加边</span></span><br><span class="line">    edge *p = ++ecnt, *q = ++ecnt;</span><br><span class="line">    p-&gt;v = v, p-&gt;next = h[u], h[u] = p;</span><br><span class="line">    q-&gt;v = u, q-&gt;next = h[v], h[v] = q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v; size[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(edge *p = h[u]; p; p = p-&gt;next)</span><br><span class="line">        <span class="keyword">if</span>((v = p-&gt;v) != f) &#123;</span><br><span class="line">            fa[v] = u,</span><br><span class="line">            dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">            dfs1(v, u);</span><br><span class="line">            size[u] += size[v];</span><br><span class="line">            <span class="keyword">if</span>(size[wson[u]] &lt; size[v]) wson[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> tp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v; top[u] = tp;</span><br><span class="line">    dfn[u] = ++tot, pre[tot] = u;</span><br><span class="line">    <span class="keyword">if</span>(wson[u]) dfs2(wson[u], tp);</span><br><span class="line">    <span class="keyword">for</span>(edge *p = h[u]; p; p = p-&gt;next)</span><br><span class="line">        <span class="keyword">if</span>((v = p-&gt;v) != fa[u] &amp;&amp; v != wson[u])</span><br><span class="line">            dfs2(v, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(node *r, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    r-&gt;left = left, r-&gt;right = right;</span><br><span class="line">    <span class="keyword">if</span>(left == right) &#123;</span><br><span class="line">        r-&gt;Max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    node *ls = ++cnt, *rs = ++cnt;</span><br><span class="line">    r-&gt;ls = ls, r-&gt;rs = rs;</span><br><span class="line">    build(ls, left, mid), build(rs, mid + <span class="number">1</span>, right);</span><br><span class="line">    r-&gt;upd();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(node *r, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(r-&gt;left == left &amp;&amp; r-&gt;right == right) &#123;</span><br><span class="line">        r-&gt;seta(<span class="number">1</span>); <span class="keyword">return</span> ;</span><br><span class="line">    &#125; r-&gt;push();</span><br><span class="line">    <span class="keyword">if</span>(r-&gt;ls-&gt;right &gt;= right) change(r-&gt;ls, left, right);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(r-&gt;rs-&gt;left &lt;= left) change(r-&gt;rs, left, right);</span><br><span class="line">    <span class="keyword">else</span> change(r-&gt;ls, left, r-&gt;ls-&gt;right),</span><br><span class="line">         change(r-&gt;rs, r-&gt;rs-&gt;left, right);</span><br><span class="line">    r-&gt;upd();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(node *r, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123; <span class="comment">// 区间求 max</span></span><br><span class="line">    r-&gt;push();</span><br><span class="line">    <span class="keyword">if</span>(r-&gt;left == left &amp;&amp; r-&gt;right == right) <span class="keyword">return</span> r-&gt;Max;</span><br><span class="line">    <span class="keyword">if</span>(r-&gt;ls-&gt;right &gt;= right) <span class="keyword">return</span> query(r-&gt;ls, left, right);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(r-&gt;rs-&gt;left &lt;= left) <span class="keyword">return</span> query(r-&gt;rs, left, right);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> max(query(r-&gt;ls, left, r-&gt;ls-&gt;right),</span><br><span class="line">                    query(r-&gt;rs, r-&gt;rs-&gt;left, right));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Qchange</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; <span class="comment">// 路径点权加一</span></span><br><span class="line">    <span class="keyword">int</span> left, right;</span><br><span class="line">    <span class="keyword">while</span>(top[u] != top[v]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[u]] &gt; dep[top[v]]) swap(u, v);</span><br><span class="line">        change(root, dfn[top[v]], dfn[v]);</span><br><span class="line">        v = fa[top[v]];</span><br><span class="line">    &#125; left = dfn[u], right = dfn[v];</span><br><span class="line">    <span class="keyword">if</span>(left &gt; right) swap(left, right);</span><br><span class="line">    change(root, left, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        addedge(u, v);</span><br><span class="line">    &#125; dep[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dfs1(<span class="number">1</span>, <span class="number">0</span>), dfs2(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    build(root = cnt, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span>(k--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        Qchange(u, v);</span><br><span class="line">    &#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query(root, <span class="number">1</span>, n)); <span class="comment">// 最后输出最大值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;给你一颗$n$个结点的树。&lt;/p&gt;
&lt;p&gt;有$k$个操作，每个操作有两个数$u$和$v$，使$u$到$v$路径上的所有点权都加一。&lt;/p&gt;
&lt;p&gt;最后输出最大的点权值。&lt;/p&gt;
&lt;p&gt;对于$100$%的的数据，满足$2 \leq n \leq 50000,\ 1 \leq k \leq 100000$&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://tle666.github.io/tags/C/"/>
    
      <category term="题解" scheme="http://tle666.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="树链剖分" scheme="http://tle666.github.io/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
      <category term="图论" scheme="http://tle666.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>数学公式</title>
    <link href="http://tle666.github.io/2019/02/19/%E5%85%AC%E5%BC%8F/"/>
    <id>http://tle666.github.io/2019/02/19/公式/</id>
    <published>2019-02-19T03:19:30.000Z</published>
    <updated>2019-02-19T08:03:58.048Z</updated>
    
    <content type="html"><![CDATA[<p>这里有一些重要的初高中数学公式，可供参考。</p><a id="more"></a><h2 id="恒等变形"><a href="#恒等变形" class="headerlink" title="恒等变形"></a>恒等变形</h2><p>$a^3 + b^3 = (a + b)(a^2 - ab + b)$</p><p>$a^3 + b^3 + c^3 - 3abc = (a + b + c)(a^2 + a^2 + c^2 - a - b - c) = \dfrac{1}{2}(a + b + c)((a - b)^2 + (b - c)^2 + (c - a)^2)$</p><p>$2(a^2 + b^2 + c^2 - ab - bc - ca) = (a - b)^2 + (b - c)^2 + (c - a)^2 \geqslant 0$</p><p>$(a + b)(b + c)(c + a) = ab^2 + bc^2 + ca^2 + a^2b + b^2c + c^2a + 2abc$</p><p>$(a - b)(b - c)(c - a) = ab^2 + bc^2 + ca^2 - a^2b - b^2c - c^2a$</p><p>$(a + b + c)(ab + bc + ca) = ab^2 + bc^2 + ca^2 + a^2b + b^2c + c^2a + 3abc$</p><p>$(a^2 + b^2)(c^2 + d^2) = (ad - bc)^2 + (ac - bd)^2$</p><p>$(a_1^2 + a_2^2 + a_3^2 + \cdots + a_n^2)(b_1^2 + b_2^2 + b_3^2 + \cdots + b_n^2) \geqslant (a_1b_1 + a_2b_2 + a_3b_3 + \cdots + a_nb_n)^2$ —— $Cauchy$不等式</p><p>$(a + b + c) ^ 3 = a ^ 3 + b ^ 3 + c ^ 3 + 3a^2b + 3ab^2 + 3b^2c + 3bc^2 +3c^2a + 3ca^2 + 6abc$</p><h2 id="几何定理"><a href="#几何定理" class="headerlink" title="几何定理"></a>几何定理</h2><h3 id="斯特瓦尔特定理"><a href="#斯特瓦尔特定理" class="headerlink" title="斯特瓦尔特定理"></a>斯特瓦尔特定理</h3><p><img src="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=904237c40cfa513d45a7648c5c043e9e/9825bc315c6034a85f121a99cf13495409237631.jpg" alt="斯特瓦尔特"></p><p>$BD \cdot AC^2 + DC \cdot AB^2 = BC \cdot AD^2 + BD \cdot DC \cdot BC$</p><h4 id="推论：中线长公式"><a href="#推论：中线长公式" class="headerlink" title="推论：中线长公式"></a>推论：中线长公式</h4><p>$AD = \frac{1}{2} \sqrt{2(AB^2 + AC^2) - BC^2}$</p><h3 id="欧拉线"><a href="#欧拉线" class="headerlink" title="欧拉线"></a>欧拉线</h3><p><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=03bba6fdda43ad4bb2234e92e36b31ca/6159252dd42a2834ee136d5350b5c9ea15cebf35.jpg" alt=""></p><p>$\triangle ABC$ 的外心 $O$ 、重心 $G$、垂心 $H$ 共线。</p><h3 id="九点圆"><a href="#九点圆" class="headerlink" title="九点圆"></a>九点圆</h3><p><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=897ee43bf9dcd100d991f07313e22c75/622762d0f703918f125573fc503d269759eec404.jpg" alt="九点圆"></p><p>在任意的三角形中，三边的中点、三条高的垂足、三条高的交点(垂心)与三角形顶点连线的中点，这九个点共圆。</p><h3 id="西姆松线"><a href="#西姆松线" class="headerlink" title="西姆松线"></a>西姆松线</h3><p><img src="https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=594aed747d3e6709aa0d4dad5aaef458/0b7b02087bf40ad19c15d6b0552c11dfa8eccef4.jpg" alt="西姆松线"></p><p>过三角形外接圆上异于三角形顶点的任意一点作三边或其延长线上的垂线，则三垂足共线。</p><h3 id="史坦纳定理"><a href="#史坦纳定理" class="headerlink" title="史坦纳定理"></a>史坦纳定理</h3><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20180208/0230f38f899b448b9369832637f73f95.png" alt="史坦纳定理"></p><p>$H$ 为$\triangle ABC$ 垂心，$D$为$\triangle ABC$ 外异于三角形顶点的任意一点，则点$D$关于$\triangle ABC$的西姆松线通过线段$DH$的中点。</p><h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>$\cot\alpha = \frac{1}{\tan\alpha} \qquad \sec\alpha = \frac{1}{\cos\alpha} \qquad \csc\alpha = \frac{1}{\sin\alpha}$</p><h3 id="诱导公式"><a href="#诱导公式" class="headerlink" title="诱导公式"></a>诱导公式</h3><p>$\sin ( \pi + \alpha) =- \sin \alpha \qquad \cos(\pi + \alpha) = -\cos \alpha \qquad \tan (\pi + \alpha) = \tan \alpha$</p><p>$\sin (-\alpha) = -\sin\alpha \qquad \cos (-\alpha) = \cos\alpha \qquad \tan(-\alpha) = -\tan\alpha$</p><p>$\sin (\pi - \alpha) = \sin \alpha \qquad \cos (\pi - \alpha) = -\cos\alpha \qquad \tan(\pi - \alpha) = -\tan\alpha$</p><p>$\sin(2\pi - \alpha) = -\sin\alpha \qquad \cos(2\pi - \alpha) = \cos\alpha \qquad \tan(2\pi - \alpha) = -\tan\alpha$</p><p>$\sin (\frac{\pi}{2} + \alpha) = \cos\alpha \qquad \sin(\frac{\pi}{2} - \alpha) = \cos\alpha$</p><p>$\cos(\frac{\pi}{2} + \alpha) = -\sin\alpha \qquad \cos(\frac{\pi}{2} - \alpha) = \sin\alpha$</p><p>$\tan(\frac{\pi}{2} + \alpha) = -\cot\alpha \qquad \tan(\frac{\pi}{2} - \alpha) = \cot\alpha$</p><h3 id="两角和（差）公式"><a href="#两角和（差）公式" class="headerlink" title="两角和（差）公式"></a>两角和（差）公式</h3><p>$\sin(\alpha \pm \beta) = \sin\alpha\cos\beta \pm \cos\alpha\sin\beta$</p><p>$\cos(\alpha \pm \beta) = \cos\alpha\cos\beta \mp \sin\alpha\sin\beta$</p><p>$\tan(\alpha \pm \beta) = \frac{\tan\alpha \pm \tan\beta}{1 \mp \tan\alpha\tan\beta}$</p><h3 id="二倍角公式"><a href="#二倍角公式" class="headerlink" title="二倍角公式"></a>二倍角公式</h3><p>$\sin 2\alpha = 2\sin\alpha\cos\alpha$</p><p>$\cos2\alpha = 2\cos^2\alpha - 1 = 1 - 2\sin^2\alpha = \frac{1-\tan^2\alpha}{1+\tan^2\alpha}$</p><p>$\tan2\alpha = \frac{2\tan\alpha}{1-\tan^2\alpha}$</p><h3 id="三倍角公式"><a href="#三倍角公式" class="headerlink" title="三倍角公式"></a>三倍角公式</h3><p>$\sin(3\alpha) = 3\sin\alpha - 4\sin^3\alpha \qquad \cos(3\alpha) = 4\cos ^ 3\alpha - 3\cos\alpha$</p><h3 id="降幂公式"><a href="#降幂公式" class="headerlink" title="降幂公式"></a>降幂公式</h3><p>$\sin^2\alpha = \frac{1 - \cos2\alpha}{2} \qquad \cos^2\alpha = \frac{1 + \cos2\alpha}{2} \qquad \tan^2\alpha = \frac{1 - \cos2\alpha}{1 + \cos2\alpha}$</p><h3 id="辅助角公式"><a href="#辅助角公式" class="headerlink" title="辅助角公式"></a>辅助角公式</h3><p>$a\sin x + b\cos x = \sqrt{a^2 + b^2}(\frac{a\sin x}{\sqrt{a^2 + b^2}} + \frac{b\cos x}{\sqrt{a^2 + b^2}})$ 或</p><p>$a\sin x + b\cos x = \sqrt{a^2 + b^2}\sin(x + \varphi)$，其中 $\sin\varphi = \frac{b}{\sqrt{a ^ 2 + b ^ 2}},\ \cos\varphi = \frac{a}{\sqrt{a^2 + b^2}}$</p><h3 id="万能公式"><a href="#万能公式" class="headerlink" title="万能公式"></a>万能公式</h3><p>$\sin\alpha = \frac{2\tan\frac{\alpha}{2}}{1 + \tan^2\frac{\alpha}{2}}$</p><p>$\cos\alpha = \frac{1 - \tan^2\frac{\alpha}{2}}{1 + \tan^2\frac{\alpha}{2}}$</p><p>$\tan\alpha = \frac{2\tan\frac{\alpha}{2}}{1 - \tan^2\frac{\alpha}{2}}$</p><h3 id="和差化积"><a href="#和差化积" class="headerlink" title="和差化积"></a>和差化积</h3><p>$\sin\alpha \pm \sin\beta = 2\sin\frac{\alpha \pm \beta}{2}\cos\frac{\alpha \mp \beta}{2}$</p><p>$\cos\alpha + \cos\beta = 2\cos\frac{\alpha + \beta}{2}\cos\frac{\alpha - \beta}{2}$</p><p>$\cos\alpha - \cos\beta = -2\sin\frac{\alpha + \beta}{2}\sin\frac{\alpha - \beta}{2}$</p><p>$\tan\alpha \pm \tan\beta = \frac{\sin(\alpha \pm \beta)}{\cos\alpha\cos\beta}$</p><h3 id="积化和差"><a href="#积化和差" class="headerlink" title="积化和差"></a>积化和差</h3><p>$\sin\alpha\cos\beta = \frac{1}{2}(\sin(\alpha + \beta) + \sin(\alpha - \beta))$</p><p>$\cos\alpha\sin\beta = \frac{1}{2}(\sin(\alpha + \beta) - \sin(\alpha - \beta))$</p><p>$\cos\alpha\cos\beta = \frac{1}{2}(\cos(\alpha +\beta) + \cos(\alpha - \beta))$</p><p>$\sin\alpha\sin\beta = -\frac{1}{2}(\cos(\alpha + \beta) - \cos(\alpha - \beta))$</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里有一些重要的初高中数学公式，可供参考。&lt;/p&gt;
    
    </summary>
    
    
      <category term="数学" scheme="http://tle666.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="三角函数" scheme="http://tle666.github.io/tags/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/"/>
    
      <category term="代数" scheme="http://tle666.github.io/tags/%E4%BB%A3%E6%95%B0/"/>
    
      <category term="几何" scheme="http://tle666.github.io/tags/%E5%87%A0%E4%BD%95/"/>
    
      <category term="公式" scheme="http://tle666.github.io/tags/%E5%85%AC%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>树链剖分详解</title>
    <link href="http://tle666.github.io/2019/02/02/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86%E8%AF%A6%E8%A7%A3/"/>
    <id>http://tle666.github.io/2019/02/02/树链剖分详解/</id>
    <published>2019-02-02T15:13:25.000Z</published>
    <updated>2019-02-21T08:07:08.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a><strong>Introduction</strong></h1><p>当我们想要同时完成</p><ul><li>求树上$u$到$v$的权值和</li><li>将树上$u​$到$v​$的权值都加$d​$</li></ul><p>这两种操作时，会怎么做呢？</p><p>相信我们对于这两种操作分别都会解决，但是如果一旦放到同一道题里，我们就会束手无策了。</p><p>树链剖分便由此而来了。</p><a id="more"></a><p>前置技能：线段树（重要） &amp; 倍增求 $LCA​$（不必须）</p><h1 id="Definition-amp-Steps"><a href="#Definition-amp-Steps" class="headerlink" title="Definition &amp; Steps"></a><strong>Definition &amp; Steps</strong></h1><blockquote><p> 树剖是通过将一棵有根树分成多个链，然后利用各种数据结构（如线段树等）来维护这棵链，从而间接地维护这棵树。</p></blockquote><p>首先，为了方便我们对树剖的理解，我们需要知道一些很基础很重要的概念：</p><ul><li>$size_i$：以$i​$为根的子树中结点个数</li><li>$dfn_i$：$i$结点的$dfs$序，即其新编号</li><li>$pre_i$：$dfn$的反函数，若$dfn_i\ =\ j$，则$pre_j\ =\ i$，即$dfn_{pre_i}\ =\ 1$。</li><li>$fa_i$：$i$结点的父亲结点（除$dfn$和$pre$外，一切结点编号非特殊说明均为默认编号）</li><li>$dep_i$：$i$的深度，默认根的深度为$1$，即$dep_{root}\ =\ 1$</li><li>$w_i$：$i$结点的权值</li><li>重儿子：一个结点所有子结点中$size​$最大的子节点，用$wson[i]​$表示</li><li>轻儿子：一个结点所有子结点中除了重儿子的其它所有子结点</li><li>重边：一个结点和它的重儿子的连边</li><li>轻边：一个节点和它的轻儿子的连边</li><li>重链：由多条重边首尾顺次连接而成的链（路径）</li><li>轻链：有多条轻边首尾顺次连接而成的链（路径）</li><li>$top_i$：$i$所在的重链的链首（可以证明每个结点都在一条重链上）</li></ul><p>上一张百度百科的图：</p><p><img src="https://s2.ax1x.com/2019/02/02/k8LSfK.jpg" alt="图片没了吗？可以到百度百科上看"></p><p>如果我们想知道$1$的重儿子是谁，那么我们只需递归地求一下它每棵子树的$size$即可；</p><p>同时，我们还可以顺便维护出所有结点的 $fa$ 和 $dep$</p><p>递归伪代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> <span class="comment">// u 当前结点，f 是 u 的父亲结点</span></span></span><br><span class="line">    size[u] = 1</span><br><span class="line">    <span class="keyword">for</span> each v that connects to u : <span class="comment">// u 的子结点</span></span><br><span class="line">    <span class="keyword">if</span>(v != f) <span class="comment">// v 不是 u 的父亲</span></span><br><span class="line">            fa[v] = u <span class="comment">// 说明 v 是 u 的子结点</span></span><br><span class="line">            dep[v] = dep[u] + <span class="number">1</span> <span class="comment">// 深度维护</span></span><br><span class="line">            dfs(v, u) <span class="comment">// 继续递归</span></span><br><span class="line">            size[u] += size[v] <span class="comment">// 将子树的 size 加到这棵树的 size 上</span></span><br><span class="line">            <span class="keyword">if</span>(size[wson[u]] &lt; size[v]) wson[u] = v <span class="comment">// 更新重儿子</span></span><br></pre></td></tr></table></figure><p>可以手动模拟一下</p><p>这样，我们就求出了每个结点的重儿子 $wson$ ；</p><p>特别地，每个叶子结点的重儿子都为 $0$</p><p>每个标红点的结点都是一条重链的链首（$top$），</p><p>而加粗的边则是重链。</p><p>比如，$1=&gt;4=&gt;9=&gt;13=&gt;14$ 就是一条重链，而 $2=&gt;6=&gt;11$ 也是另一条重链；</p><p>另外我们会注意到，除了根节点以外的所有重链链首都是轻儿子，</p><p>例如 $top[3]\ =\ 3​$；</p><p>回顾一下，还有哪些信息没有维护呢？</p><p>$dfn,\ pre,\ top$ </p><p>其实，这三个只需要另一个递归函数就足够啦！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> tp)</span> <span class="comment">// u 是当前结点，tp 是 u 所在重链的链首</span></span></span><br><span class="line">    top[u] = tp</span><br><span class="line">    dfn[u] = ++tot <span class="comment">// tot 是时间戳</span></span><br><span class="line">    pre[tot] = u <span class="comment">// pre 是 dfn 的反函数</span></span><br><span class="line">    <span class="keyword">if</span>(wson[u]) dfs2(wson[u], tp); <span class="comment">// 只要 u 有重儿子，那就可以继续下去</span></span><br><span class="line">    <span class="keyword">for</span> each v that connects to u : </span><br><span class="line"><span class="keyword">if</span>(v != fa[u] &amp;&amp; v != wson[u]) <span class="comment">// v 是 u 的轻儿子</span></span><br><span class="line">            dfs2(v, v); <span class="comment">// 轻儿子是重链的链首</span></span><br></pre></td></tr></table></figure><p>图中边上的数字就是 $dfs2$ 递归地顺序，不明白的可以参考一下。</p><p>检测一下你有没有明白：$2$ 的 $dfn$ 是几？$7$ 的 $pre$ 是几？</p><p>$Answer:\ 10,\ 8$。</p><p><strong>好了，树链剖分阶段到此结束。</strong></p><p>将这棵树剖分成了许多链，现在就可以用线段树维护了~</p><blockquote><p>写上了一段带修改查询的线段树模板。。。</p></blockquote><p>现在轮到处理问题的阶段了。</p><p>为了便于理解，我们就先实现两个最基础的操作吧：</p><p>路径点权求和、路径点权修改</p><p>大体思路很简单，就是把这条路径分成若干条原来的重链，然后依次实现。</p><p>举个栗子：求 $9$ 到 $11$ 路径上的点权之和（还是上面那张图。。）</p><p><img src="https://s2.ax1x.com/2019/02/02/k8LSfK.jpg" alt="图片没了吗？可以到百度百科上看"></p><p>为了简单起见，我们暂定每个点的点权是它的编号（不是 $dfn$）。</p><p>这个和倍增求 $LCA$ 有点像。</p><p>先找到 $dep$ 更深的结点，$11$（$dep[11]\ &gt;\ dep[9]$）</p><p>将答案 $res$ 加上 $11$ 到 $top[11]$ 的点权和</p><p>我们可以用事先维护好的 $dfn​$ 来帮助</p><p>由于 $top[11]\ =\ 2$，所以我们在求 $2=&gt;11$ 的和</p><p>我们发现因为这是一条重链，所以这条路径上的每个点的 $dfn$ 都是连续的！</p><p>线段树有用了，注意 $dfn[top[11]] &lt; dfn[11]$</p><p><code>res += query(root, dfn[top[11]], dfn[11])</code></p><p>这是，操作变成了求 $res\ +\ 9=&gt;11$ 的路径点权和。 </p><p>所以我们将 $11$ 变为 $fa[top[11]]\ =\ 1$</p><p>这是，我们发现 $1$ 和 $9$ 共链了。</p><p>所以像刚才一样，</p><p><code>res += query(root, dfn[1], dfn[9])</code></p><p>即可！</p><p>将上面的步骤转化成代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Qsum</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left, right, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[u] != top[v]) &#123; <span class="comment">// 只要不共链</span></span><br><span class="line">        <span class="keyword">if</span>(dep[top[u]] &gt; dep[top[v]]) swap(u, v); <span class="comment">// 每次都要让 top 深一些的往上跳</span></span><br><span class="line">        res += query(root, dfn[top[v]], dfn[v]);</span><br><span class="line">        v = fa[top[v]];</span><br><span class="line">    &#125; left = dfn[u], right = dfn[v];</span><br><span class="line">    <span class="keyword">if</span>(left &gt; right) swap(left, right); <span class="comment">// 注意大小关系！</span></span><br><span class="line">    res += query(root, left, right);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单吧！</p><p>修改操作类似，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vois <span class="title">Qchange</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> d)</span> </span>&#123; <span class="comment">// u 到 v 的路径上点权加 d</span></span><br><span class="line">    <span class="keyword">int</span> left, right;</span><br><span class="line">    <span class="keyword">while</span>(top[u] != top[v]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[u]] &gt; dep[top[v]]) swap(u, v);</span><br><span class="line">        change(root, dfn[top[v]], dfn[v], d);</span><br><span class="line">        v = fa[top[v]];</span><br><span class="line">    &#125; left = dfn[u], right = dfn[v];</span><br><span class="line">    <span class="keyword">if</span>(left &gt; right) swap(left, right);</span><br><span class="line">    change(root, left, right, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a><strong>Code</strong></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100100</span></span><br><span class="line"><span class="keyword">int</span> n, m, dep[MAXN], fa[MAXN], wson[MAXN], top[MAXN];</span><br><span class="line"><span class="keyword">int</span> dfn[MAXN], tot, size[MAXN], pre[MAXN], w[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> <span class="comment">// 存图</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    edge *next;</span><br><span class="line">&#125; epool[MAXN &lt;&lt; <span class="number">1</span>], *h[MAXN], *ecnt = epool;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> <span class="comment">// 存线段树</span></span><br><span class="line">    <span class="keyword">int</span> left, right, s, tag;</span><br><span class="line">    node *ls, *rs;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">seta</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; tag += x, s += (right - left + <span class="number">1</span>) * x;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">upd</span><span class="params">()</span> </span>&#123; s = ls-&gt;s + rs-&gt;s;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tag) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ls) ls-&gt;seta(tag);</span><br><span class="line">            <span class="keyword">if</span>(rs) rs-&gt;seta(tag);</span><br><span class="line">            tag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; pool[MAXN &lt;&lt; <span class="number">3</span>], *root, *cnt = pool;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; <span class="comment">// 加边</span></span><br><span class="line">    edge *p = ++ecnt, *q = ++ecnt;</span><br><span class="line">    p-&gt;v = v, p-&gt;next = h[u], h[u] = p;</span><br><span class="line">    q-&gt;v = u, q-&gt;next = h[v], h[v] = q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v; size[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(edge *p = h[u]; p; p = p-&gt;next)</span><br><span class="line">        <span class="keyword">if</span>((v = p-&gt;v) != f) &#123;</span><br><span class="line">            fa[v] = u,</span><br><span class="line">            dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">            dfs1(v, u);</span><br><span class="line">            size[u] += size[v];</span><br><span class="line">            <span class="keyword">if</span>(size[v] &gt; size[wson[u]]) wson[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> tp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v; top[u] = tp;</span><br><span class="line">    dfn[u] = ++tot, pre[tot] = u;</span><br><span class="line">    <span class="keyword">if</span>(wson[u]) dfs2(wson[u], tp);</span><br><span class="line">    <span class="keyword">for</span>(edge *p = h[u]; p; p = p-&gt;next)</span><br><span class="line">        <span class="keyword">if</span>((v = p-&gt;v) != wson[u] &amp;&amp; v != fa[u])</span><br><span class="line">            dfs2(v, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(node *r, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123; <span class="comment">// 线段树模板</span></span><br><span class="line">    r-&gt;left = left, r-&gt;right = right;</span><br><span class="line">    <span class="keyword">if</span>(left == right) &#123;</span><br><span class="line">        r-&gt;s = w[pre[left]];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    node *ls = ++cnt, *rs = ++cnt;</span><br><span class="line">    r-&gt;ls = ls, r-&gt;rs = rs;</span><br><span class="line">    build(ls, left, mid), build(rs, mid + <span class="number">1</span>, right);</span><br><span class="line">    r-&gt;upd();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(node *r, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> d)</span> </span>&#123; <span class="comment">// 线段树模板</span></span><br><span class="line">    <span class="keyword">if</span>(r-&gt;left == left &amp;&amp; r-&gt;right == right) &#123;</span><br><span class="line">        r-&gt;seta(d); <span class="keyword">return</span> ;</span><br><span class="line">    &#125; r-&gt;push();</span><br><span class="line">    <span class="keyword">if</span>(r-&gt;ls-&gt;right &gt;= right) change(r-&gt;ls, left, right, d);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(r-&gt;rs-&gt;left &lt;= left) change(r-&gt;rs, left, right, d);</span><br><span class="line">    <span class="keyword">else</span> change(r-&gt;ls, left, r-&gt;ls-&gt;right, d),</span><br><span class="line">         change(r-&gt;rs, r-&gt;rs-&gt;left, right, d);</span><br><span class="line">    r-&gt;upd();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(node *r, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123; <span class="comment">// 线段树模板</span></span><br><span class="line">    r-&gt;push();</span><br><span class="line">    <span class="keyword">if</span>(r-&gt;left == left &amp;&amp; r-&gt;right == right) <span class="keyword">return</span> r-&gt;s;</span><br><span class="line">    <span class="keyword">if</span>(r-&gt;ls-&gt;right &gt;= right) <span class="keyword">return</span> query(r-&gt;ls, left, right);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(r-&gt;rs-&gt;left &lt;= left) <span class="keyword">return</span> query(r-&gt;rs, left, right);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(r-&gt;ls, left, r-&gt;ls-&gt;right) +</span><br><span class="line">                query(r-&gt;rs, r-&gt;rs-&gt;left, right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Qsum</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left, right, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[u] != top[v]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[u]] &gt; dep[top[v]]) swap(u, v);</span><br><span class="line">        res += query(root, dfn[top[v]], dfn[v]);</span><br><span class="line">        v = fa[top[v]];</span><br><span class="line">    &#125; left = dfn[u], right = dfn[v];</span><br><span class="line">    <span class="keyword">if</span>(left &gt; right) swap(left, right);</span><br><span class="line">    res += query(root, left, right);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Qchange</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left, right;</span><br><span class="line">    <span class="keyword">while</span>(top[u] != top[v]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[u]] &gt; dep[top[v]]) swap(u, v);</span><br><span class="line">        change(root, dfn[top[v]], dfn[v], d);</span><br><span class="line">        v = fa[top[v]];</span><br><span class="line">    &#125; left = dfn[u], right = dfn[v];</span><br><span class="line">    <span class="keyword">if</span>(left &gt; right) swap(left, right);</span><br><span class="line">    change(root, left, right, d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> op, u, v, d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]); <span class="comment">// 读入点权</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123; <span class="comment">// 读图</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        addedge(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    dep[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// 这步不能忘，否则 dfs1 没用！</span></span><br><span class="line">    dfs1(<span class="number">1</span>, <span class="number">0</span>), dfs2(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    build(root = cnt, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123; <span class="comment">// 操作</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;op, &amp;u, &amp;v);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Qsum(u, v));</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;d);</span><br><span class="line">            Qchange(u, v, d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;当我们想要同时完成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;求树上$u$到$v$的权值和&lt;/li&gt;
&lt;li&gt;将树上$u​$到$v​$的权值都加$d​$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两种操作时，会怎么做呢？&lt;/p&gt;
&lt;p&gt;相信我们对于这两种操作分别都会解决，但是如果一旦放到同一道题里，我们就会束手无策了。&lt;/p&gt;
&lt;p&gt;树链剖分便由此而来了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://tle666.github.io/tags/C/"/>
    
      <category term="树链剖分" scheme="http://tle666.github.io/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
      <category term="算法讲解" scheme="http://tle666.github.io/tags/%E7%AE%97%E6%B3%95%E8%AE%B2%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>[BZOJ5165] 树上倍增</title>
    <link href="http://tle666.github.io/2019/02/02/%5BBZOJ5165%5D%20%E6%A0%91%E4%B8%8A%E5%80%8D%E5%A2%9E/"/>
    <id>http://tle666.github.io/2019/02/02/[BZOJ5165] 树上倍增/</id>
    <published>2019-02-02T09:59:01.000Z</published>
    <updated>2019-02-02T12:30:16.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a><strong>Description</strong></h1><p>维护一棵支持插入节点与求$k$个节点的$LCA$的树。</p><p>总节点数 $n\leq 3 \times 10^6$  ，操作次数 $m \leq 10^3$，$k \leq 10^3$</p><a id="more"></a><p>题目链接： <a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5165" target="_blank" rel="noopener">BZOJ P5165</a></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><strong>Solution</strong></h1><p>思路题目名称已经给了好嘛。。。</p><p>就是倍增啊。。</p><p>其实这题的难点不是在于思路想法，而是在于<strong>卡空间</strong>！</p><h2 id="操作1"><a href="#操作1" class="headerlink" title="操作1"></a>操作1</h2><blockquote><p>$A \ x$ 新建一个节点，将它作为$x$节点的儿子，编号为当前节点总数$+1​$。</p></blockquote><p>维护一下倍增$LCA$所需的信息：深度信息$dep$、倍增数组$st$</p><p>具体的维护方法见下面的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dep[i] = j 代表 编号为i的节点深度为j，我们默认dep[root] = <span class="number">1</span></span><br><span class="line">st[i][j] = k 代表 编号为i的节点向上跳<span class="number">2</span> ^ j个点到编号为k的节点</span><br><span class="line">因此st[i][<span class="number">0</span>]即为节点i的父亲</span><br><span class="line"></span><br><span class="line">dep[++n] = dep[x] + <span class="number">1</span>; <span class="comment">// 即 n++, dep[n] = dep[x] + 1。 n是当前节点编号</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--) <span class="comment">// 2 ^ 21 &gt; 3e6，因此只需维护到20即可</span></span><br><span class="line">    st[n][i] = st[st[n][i - <span class="number">1</span>]][i - <span class="number">1</span>]; <span class="comment">// 倍增数组标准维护语句</span></span><br></pre></td></tr></table></figure><h2 id="操作2"><a href="#操作2" class="headerlink" title="操作2"></a>操作2</h2><blockquote><p>$Q \ k\  p1\  p2\ p3\ …$ 查询$p1,\ p2,\ p3\ …$这些节点的$LCA$。其中$k$表示查询节点的个数。</p></blockquote><p>这个我想没什么好讲的吧。</p><p>就是依次求$LCA$就行啦。<del>如果不懂详见代码</del></p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a><strong>Code</strong></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 3000003</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">1</span>, m, dep[MAXN], st[MAXN][<span class="number">21</span>], P;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">2</span>]; <span class="comment">// 读入操作用，char可能会咕掉</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">// 新建节点操作，上文讲过</span></span><br><span class="line">    dep[++n] = dep[x] + <span class="number">1</span>, st[n][<span class="number">0</span>] = x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++)</span><br><span class="line">        st[n][i] = st[st[n][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; <span class="comment">// 基本的LCA操作，不解释</span></span><br><span class="line">    <span class="keyword">if</span>(dep[u] &gt; dep[v]) swap(u, v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span>(dep[v] - dep[u] &gt;= (<span class="number">1</span> &lt;&lt; i))</span><br><span class="line">            v = st[v][i];</span><br><span class="line">    <span class="keyword">if</span>(u == v) <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span>(st[u][i] != st[v][i])</span><br><span class="line">            u = st[u][i],</span><br><span class="line">            v = st[v][i];</span><br><span class="line">    <span class="keyword">return</span> st[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, lca; dep[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// 将root的深度设为1</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, ch, &amp;k);</span><br><span class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>] == <span class="string">'A'</span>) insert(k);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;lca); <span class="comment">//依次求LCA</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; i++)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;P), lca = LCA(lca, P);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lca);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;维护一棵支持插入节点与求$k$个节点的$LCA$的树。&lt;/p&gt;
&lt;p&gt;总节点数 $n\leq 3 \times 10^6$  ，操作次数 $m \leq 10^3$，$k \leq 10^3$&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://tle666.github.io/tags/C/"/>
    
      <category term="LCA" scheme="http://tle666.github.io/tags/LCA/"/>
    
      <category term="倍增" scheme="http://tle666.github.io/tags/%E5%80%8D%E5%A2%9E/"/>
    
      <category term="题解" scheme="http://tle666.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>快速读入详解</title>
    <link href="http://tle666.github.io/2019/01/27/%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%85%A5%E8%AF%A6%E8%A7%A3/"/>
    <id>http://tle666.github.io/2019/01/27/快速读入详解/</id>
    <published>2019-01-27T03:41:50.000Z</published>
    <updated>2019-01-27T03:52:07.671Z</updated>
    
    <content type="html"><![CDATA[<p>快读是干蛤的呐？这篇文章将讲述快读及其用法和C++模板</p><a id="more"></a><p>当你在信息学竞赛$(OI)$中进入了提高组时，你可能会被卡常！</p><h2 id="卡常！"><a href="#卡常！" class="headerlink" title="卡常！"></a>卡常！</h2><blockquote><p>程序被卡常数，一般指程序虽然渐进复杂度可以接受，但是由于实现/算法本身的时间常数因子较大，使得无法在OI/ICPC等算法竞赛规定的时限内运行结束。</p><p>常数被称为计算机算法竞赛之中最神奇的一类数字，主要特点集中于令人捉摸不透，有时候会让水平很高的选手迷之超时或者超空间。</p></blockquote><pre><code>                    ——来自~~某度~~百科……</code></pre><h2 id="快速读入"><a href="#快速读入" class="headerlink" title="快速读入"></a>快速读入</h2><blockquote><p>简称快读，是信息学竞赛中卡常数最为常见的方法。</p></blockquote><p>一般来讲，大多数题目的出题人都不会到这种<del>丧心病狂的</del>地步。</p><p>不过，以防万一肯定没坏处啊~ <del>反正代码很简单啦</del></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>先上代码！讲解在后面。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>, w = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) w = <span class="number">-1</span>; ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) s = s * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line">    <span class="keyword">return</span> s * w;</span><br><span class="line">&#125; <span class="comment">// 这是能判负数的C++快读模板</span></span><br></pre></td></tr></table></figure><p>在代码中，只需将<code>cin &gt;&gt; n</code>或<code>scanf(&quot;%d&quot;, &amp;n)</code>改成<code>n  = read()</code>即可！</p><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>为什么$cin$慢？因为它需要和$stdio$保持同步，也就是<code>sync_with_stdio</code>。</p><p>为什么$scanf$慢？原因有点复杂。</p><ol><li>它可以接受多种形式的输入（数字、字符串等等），因此需要判断。</li><li>它因为某些安全原因——输入太快可能会有些玄学的$bug$，具体的我也不太清楚。</li></ol><p>其实在$C++$中，依次读入单个字符是比一次读入一个数要快的，因此我们可以用$getchar()$来负责读入。</p><p>在实际的文件中，会有许多不必要的隐藏字符，比如换行符<code>\n</code>等。</p><p>因此，我们需要先排除掉这些字符，也就是第一个$while$循环。但是有一个特例：$-21904$中的$-$号。这个负号不是数字啊！于是我们用$w$当数的符号。有负号时，$w$从原来的$1$转化成了$-1$。</p><p>于是，我们要特判！<code>if(ch == ‘-’) w = -1;</code>这就是判负号的语句。</p><p>下一个循环中，就是<a href="https://wenku.baidu.com/view/7fdcf9727dd184254b35eefdc8d376eeafaa1716.html" target="_blank" rel="noopener">位值原理</a>。数$\overline{abcd} = 10 \times (10 \times (10 \times a + b) + c) + d$，读者自证不难。</p><p>最后返回$n = sgn(n) \times |n|$，其中$sgn(x)$为$x$的符号。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快读是干蛤的呐？这篇文章将讲述快读及其用法和C++模板&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://tle666.github.io/tags/C/"/>
    
      <category term="算法讲解" scheme="http://tle666.github.io/tags/%E7%AE%97%E6%B3%95%E8%AE%B2%E8%A7%A3/"/>
    
      <category term="卡常" scheme="http://tle666.github.io/tags/%E5%8D%A1%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>浅谈二分</title>
    <link href="http://tle666.github.io/2019/01/27/%E6%B5%85%E8%B0%88%E4%BA%8C%E5%88%86/"/>
    <id>http://tle666.github.io/2019/01/27/浅谈二分/</id>
    <published>2019-01-27T03:39:50.000Z</published>
    <updated>2019-01-27T03:59:03.795Z</updated>
    
    <content type="html"><![CDATA[<p> 二分法的定义是什么？它的用途又是什么呢？这篇文章将会介绍一下二分法在各类问题中的应用。</p><a id="more"></a><ul><li>大家一定对二分法有所耳闻吧！它的定义是什么？它的用途又是什么？下面我就来介绍一下二分法及其用途。</li></ul><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>找出函数$f(x) = 3x - 3$在闭区间$[0，4]$的零点。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><ul><li>首先，令$L = -1$，$R = 1$。</li><li>然后进行如下操作，直到$f(mid) = 0$为止。</li></ul><ol><li>算出$L$和$R$的代数平均数$mid$，且$mid \in \mathbb{Z}$，即整数$mid = \lfloor \dfrac{a + b}{2} \rfloor$。</li><li><ul><li>若$f(mid) = 0$，找到答案<ul><li>若$f(mid) &gt; 0$，让$b = mid$，缩小区间</li><li>若$f(mid) &lt; 0$，让$a = mid$，缩小区间</li></ul></li></ul></li><li>回到步骤$1$。<br> 如果你没有明白的话，那就看图吧。。。</li></ol><p><img src="https://s1.ax1x.com/2018/12/20/FDTt1S.png" alt="函数求零点"></p><ol><li>$L = 0, R = 4, mid = \lfloor \dfrac{0 + 4}{2} \rfloor = 2$</li><li>$f(mid) = f(2) = 3 &gt; 0$</li><li>因为$f(x)$为单调递增函数，所以零点肯定在$2$左边。</li><li>缩小范围至$[0,2]$，$R = 2$。</li><li>此时$mid = \lfloor \dfrac{0 + 2}{2} \rfloor= 1$</li><li>$f(mid) = f(1) = 0$！</li><li>找到答案$0$。</li></ol><h3 id="例题回顾（条件）"><a href="#例题回顾（条件）" class="headerlink" title="例题回顾（条件）"></a>例题回顾（条件）</h3><ul><li>在上面的例题中，能够正确地使用以上“缩小范围区间”的解法的条件是什么呢?</li><li>显然，函数$f(x)$需要是单调的，而到底是递增还是递减就无所谓了。</li></ul><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><ul><li>对于区间$[a, b]$上连续不断且$f(a) \times f(b) &lt; 0$的函数$y=f(x)$，通过不断地把函数$f(x)$的零点所在的区间一分为二，使区间的两个端点逐步逼近零点，进而得到零点近似值的方法叫二分法。</li></ul><p>在信息学中，二分法最常见的体现就是<strong>二分答案</strong>。</p><p>在这篇随笔中，我主要讲解的就是二分答案。</p><h2 id="二分答案"><a href="#二分答案" class="headerlink" title="二分答案"></a>二分答案</h2><ul><li>二分答案,是通过不断缩小解可能存在的范围,从而求得问题答案的方法。</li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p><strong>猜数字</strong></p><ul><li><p>事先准备一个$[1, 100]$的正整数，让电脑猜。每次猜测会告诉猜数与答案的大小关系。</p></li><li><p>朴素的方法：枚举法，从$1 - 100$依次尝试，直到猜对为止。时间复杂度为$O(n)$。</p></li><li>二分答案：<br>  $L = 1, R = 100, mid = \lfloor \dfrac{L + R}{2} \rfloor = 50$，设答案为$ans$。<br>  只要$L \leqslant R$，尝试$mid$，<script type="math/tex; mode=display">\left\{  \begin{aligned}  & 若mid > ans，则R = mid； \\  & 若mid < ans，则L = mid + 1； \\  & 若mid = ans，猜对了。  \end{aligned}  \right.</script>  时间复杂度为$O(log n)$。</li></ul><h3 id="为什么二分"><a href="#为什么二分" class="headerlink" title="为什么二分"></a>为什么二分</h3><ul><li>更充分地利用已知条件，大幅度减少遍历范围</li><li>二分答案具有“先猜后证”的特点，可以给题目多增加一个条件，也许可以大幅度减小算法的时间开销</li></ul><h3 id="在什么情况下可以二分"><a href="#在什么情况下可以二分" class="headerlink" title="在什么情况下可以二分"></a>在什么情况下可以二分</h3><ul><li>答案存在单调性<br>  <img src="https://s2.ax1x.com/2019/01/27/kucZo8.png" alt=""></li></ul><p>什么意思呢？</p><p>我们不妨假设答案满足条件为$1$，不满足为$0$；</p><p>那么如果一个答案序列为$0000000111$或$1111100000$，都存在单调性，那就都可以；</p><p>而如果序列是$000011011000110000$，那就不满足单调性，于是就不能进行二分答案了。</p><h3 id="能够解决的问题"><a href="#能够解决的问题" class="headerlink" title="能够解决的问题"></a>能够解决的问题</h3><p>二分答案能够解决哪些问题呢？如下：</p><ul><li>最大的最小值</li><li>最小的最大值</li><li>在满足条件的情况下的最小（大）值</li><li>最接近一个值的值</li><li>…… 在一个单调序列中特殊的点基本上都能二分。</li></ul><h3 id="模板（-C-）"><a href="#模板（-C-）" class="headerlink" title="模板（$C++$）"></a>模板（$C++$）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个求满足条件的最小值的二分模板</span></span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>, right = MAX, mid, ans; <span class="comment">// left为左边界，right为右边界</span></span><br><span class="line"><span class="keyword">while</span>(left &lt;= right)&#123; <span class="comment">// 只要存在区间</span></span><br><span class="line">    mid = (left + right) &gt;&gt; <span class="number">1</span>; <span class="comment">// 等价于(left + right) / 2，只不过这样写运行速度会稍快一些</span></span><br><span class="line">    <span class="keyword">if</span>(check(mid)) ans = mid, right = mid - <span class="number">1</span>; <span class="comment">// 如果mid满足条件，那ans（答案）肯定不大于mid</span></span><br><span class="line">    <span class="keyword">else</span> left = mid + <span class="number">1</span>; <span class="comment">// 如果不能满足条件，ans区间最小值肯定大于mid</span></span><br><span class="line">&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans); <span class="comment">// 输出答案</span></span><br></pre></td></tr></table></figure><p>为什么第五行要加上<code>ans = mid</code>呢？</p><p>原因：如果$mid$恰好就是正确答案，$check(mid)$满足，为$true$，于是进入本句。如果将$right$设为$mid - 1$的话，就永远得不到$ans$了（可以想一想为什么）</p><p>这就出现了另一种写法——</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个求满足条件的最小值的二分模板</span></span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>, right = MAX, mid; <span class="comment">// left为左边界，right为右边界</span></span><br><span class="line"><span class="keyword">while</span>(left &lt; right)&#123; <span class="comment">// #注意这里改变#</span></span><br><span class="line">    mid = (left + right) &gt;&gt; <span class="number">1</span>; <span class="comment">// 等价于(left + right) / 2，只不过这样写运行速度会稍快一些</span></span><br><span class="line">    <span class="keyword">if</span>(check(mid)) right = mid; <span class="comment">// #注意这里也改变#</span></span><br><span class="line">    <span class="keyword">else</span> left = mid + <span class="number">1</span>; <span class="comment">// 如果不能满足条件，ans区间最小值肯定大于mid</span></span><br><span class="line">&#125; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, right); <span class="comment">// 输出答案</span></span><br></pre></td></tr></table></figure><p>不过我个人建议还是写第一种好（更好理解，不容易错）。</p><p>那这两段代码中的$check$函数是干什么的呢？</p><p>其实，布尔型函数$check(x)$是用来判断$x$条件下是否能成功（满足题目条件）。</p><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><ul><li><a href="https://www.luogu.org/problemnew/show/P1843" target="_blank" rel="noopener">奶牛晒衣服</a></li><li><a href="https://www.luogu.org/problemnew/show/P1396" target="_blank" rel="noopener">营救</a> （如果不会最小生成树请自动跳过~）</li><li><a href="https://www.luogu.org/problemnew/show/P2678" target="_blank" rel="noopener">$NOIP2015$ 跳石头</a></li><li><p><a href="https://www.luogu.org/problemnew/show/P1439" target="_blank" rel="noopener">【模板】最长公共子序列</a></p></li><li><p>……</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 二分法的定义是什么？它的用途又是什么呢？这篇文章将会介绍一下二分法在各类问题中的应用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://tle666.github.io/tags/C/"/>
    
      <category term="二分" scheme="http://tle666.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="算法讲解" scheme="http://tle666.github.io/tags/%E7%AE%97%E6%B3%95%E8%AE%B2%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>[luogu1462] 通往奥格瑞玛的道路</title>
    <link href="http://tle666.github.io/2019/01/27/%5Bluogu1462%5D%20%E9%80%9A%E5%BE%80%E5%A5%A5%E6%A0%BC%E7%91%9E%E7%8E%9B%E7%9A%84%E9%81%93%E8%B7%AF/"/>
    <id>http://tle666.github.io/2019/01/27/[luogu1462] 通往奥格瑞玛的道路/</id>
    <published>2019-01-27T03:36:50.000Z</published>
    <updated>2019-02-27T13:11:03.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a><strong>Description</strong></h1><p>$n$个点$m​$条边的带权无向图</p><p>每个点还有一个点权</p><p>求$1-n$的一条最短路径，使得路径长度比$b​$短，并且经过的点权之和最大。</p><p>输出这个最大值</p><a id="more"></a><p>看完题面感觉语文要挂科。。。o(╥﹏╥)o</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><strong>Solution</strong></h1><p>这题正解 <strong>$SPFA\ +​$ 二分</strong></p><p>二分答案，$check()$函数中过一遍$SPFA$，然后跑一下$path$，也就是回溯函数（用来求最短路径），然后判一下符不符合题意就行了</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a><strong>Code</strong></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 50010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (int)1e9</span></span><br><span class="line"><span class="keyword">int</span> n, m, cnt, blood, f[MAXN], dis[MAXN], pre[MAXN], ans; <span class="comment">//pre[u]代表u到1的最短路的上一个节点</span></span><br><span class="line"><span class="keyword">bool</span> flag[MAXN];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span> <span class="comment">//邻接表</span></span><br><span class="line"><span class="keyword">int</span> v, w;</span><br><span class="line">edge *next;</span><br><span class="line">&#125;pool[MAXN &lt;&lt; <span class="number">1</span>], *h[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span>&#123; <span class="comment">//建边函数</span></span><br><span class="line">edge *p = &amp;pool[++cnt], *q = &amp;pool[++cnt];</span><br><span class="line">p-&gt;v = v, p-&gt;w = w, p-&gt;next = h[u], h[u] = p;</span><br><span class="line">q-&gt;v = u, q-&gt;w = w, q-&gt;next = h[v], h[v] = q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> money)</span></span>&#123; <span class="comment">//money代表这次至少收取多少钱，所能够走道的最短路</span></span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) dis[i] = INF;</span><br><span class="line">flag[<span class="number">1</span>] = <span class="literal">true</span>, Q.push(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(!Q.empty())&#123;</span><br><span class="line">u = Q.front(), Q.pop(), flag[u] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(edge *p = h[u]; p; p = p-&gt;next)</span><br><span class="line"><span class="keyword">if</span>(dis[v = p-&gt;v] &gt; dis[u] + p-&gt;w &amp;&amp; f[u] &lt;= money)&#123; <span class="comment">//注意这里要判一下点权（钱）是否满足要求（money）</span></span><br><span class="line">dis[v] = dis[u] + p-&gt;w, pre[v] = u;</span><br><span class="line"><span class="keyword">if</span>(!flag[v])</span><br><span class="line">Q.push(v), flag[v] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">path</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123; <span class="comment">//最短路回溯函数（递归调用）</span></span><br><span class="line"><span class="keyword">if</span>(u == <span class="number">1</span>) <span class="keyword">return</span> f[<span class="number">1</span>]; <span class="comment">//到头</span></span><br><span class="line"><span class="keyword">if</span>(u != <span class="number">1</span> &amp;&amp; !pre[u]) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//走不通了（不连通）</span></span><br><span class="line"><span class="keyword">return</span> max(f[u], path(pre[u])); <span class="comment">//最多一次的钱</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//二分函数</span></span><br><span class="line">spfa(x);</span><br><span class="line"><span class="keyword">int</span> tmp = path(n);</span><br><span class="line"><span class="keyword">if</span>(tmp &lt;= x &amp;&amp; tmp &gt;= <span class="number">0</span> &amp;&amp; dis[n] &lt;= blood) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u, v, w, left = INF, right = <span class="number">0</span>, mid, Max = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;blood);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;f[i]);</span><br><span class="line">left = min(left, f[i]), Max = right = max(right, f[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">addedge(u, v, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid)) right = mid - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(left &gt; Max) <span class="built_in">puts</span>(<span class="string">"AFK"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, left);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;$n$个点$m​$条边的带权无向图&lt;/p&gt;
&lt;p&gt;每个点还有一个点权&lt;/p&gt;
&lt;p&gt;求$1-n$的一条最短路径，使得路径长度比$b​$短，并且经过的点权之和最大。&lt;/p&gt;
&lt;p&gt;输出这个最大值&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://tle666.github.io/tags/C/"/>
    
      <category term="题解" scheme="http://tle666.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="图论" scheme="http://tle666.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="http://tle666.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="SPFA" scheme="http://tle666.github.io/tags/SPFA/"/>
    
      <category term="二分" scheme="http://tle666.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>[CQOI2009] 中位数</title>
    <link href="http://tle666.github.io/2019/01/27/%5BCQOI2009%5D%20%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <id>http://tle666.github.io/2019/01/27/[CQOI2009] 中位数/</id>
    <published>2019-01-27T03:33:40.000Z</published>
    <updated>2019-02-27T13:11:16.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a><strong>Description</strong></h1><p>给出$1-n$的一个排列，统计该排列有多少个长度为奇数的连续子序列的中位数是b。</p><p>对于100%的数据，满足$n \leq 100000,\ 1 \leq b \leq n$。</p><a id="more"></a><h5 id="题目传送门"><a href="#题目传送门" class="headerlink" title="题目传送门"></a><a href="https://www.luogu.org/problem/show?pid=1627" target="_blank" rel="noopener">题目传送门</a></h5><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a><strong>Solution</strong></h1><h3 id="标记一遍相对大小，大的标1，小的标-1。只要连续-n-项和为0，就能满足题目条件。"><a href="#标记一遍相对大小，大的标1，小的标-1。只要连续-n-项和为0，就能满足题目条件。" class="headerlink" title="标记一遍相对大小，大的标1，小的标-1。只要连续 n 项和为0，就能满足题目条件。"></a>标记一遍相对大小，大的标1，小的标-1。只要连续 n 项和为0，就能满足题目条件。</h3><h3 id="首先一遍找到中位数位置-pos，放个数组-flag-标记查找中的数与目标中位数的相对大小："><a href="#首先一遍找到中位数位置-pos，放个数组-flag-标记查找中的数与目标中位数的相对大小：" class="headerlink" title="首先一遍找到中位数位置 pos，放个数组 flag 标记查找中的数与目标中位数的相对大小："></a>首先一遍找到中位数位置 pos，放个数组 flag 标记查找中的数与目标中位数的相对大小：</h3><p>1 -&gt; 比中位数大</p><p>-1 -&gt; 比中位数小</p><p>0 -&gt; 找到中位数！标记pos</p><p>还是举个实例吧……</p><p>数组：1 1 -1 -1 -1 pos 1 -1 1</p><h3 id="然后从-pos-1-走一遍到1，也就是反过来。再拿一个变量-sum-标记每往左走一个时数组-flag-这一项与这之前的项之和。怎么标？用哈希的方法！（开个数组-f-）那万一-sum-值为负怎么办？数组的下标可没有负的！凉拌-把所有-sum-值统统加上一个足够大的值-“KEY”-。这样下标的值就不会为负啦。"><a href="#然后从-pos-1-走一遍到1，也就是反过来。再拿一个变量-sum-标记每往左走一个时数组-flag-这一项与这之前的项之和。怎么标？用哈希的方法！（开个数组-f-）那万一-sum-值为负怎么办？数组的下标可没有负的！凉拌-把所有-sum-值统统加上一个足够大的值-“KEY”-。这样下标的值就不会为负啦。" class="headerlink" title="然后从 (pos - 1) 走一遍到1，也就是反过来。再拿一个变量 sum 标记每往左走一个时数组 flag 这一项与这之前的项之和。怎么标？用哈希的方法！（开个数组 f ）那万一 sum 值为负怎么办？数组的下标可没有负的！凉拌~ 把所有 sum 值统统加上一个足够大的值 “KEY” 。这样下标的值就不会为负啦。"></a>然后从 (pos - 1) 走一遍到1，也就是反过来。再拿一个变量 sum 标记每往左走一个时数组 flag 这一项与这之前的项之和。怎么标？用哈希的方法！（开个数组 f ）那万一 sum 值为负怎么办？数组的下标可没有负的！凉拌~ 把所有 sum 值统统加上一个足够大的值 “KEY” 。这样下标的值就不会为负啦。</h3><p>这时的 sum 数组：-1 -2 -3 -2 -1</p><p>这时的 f 数组：f [ -1 + KEY ] = 2 ;  f [ -2 + KEY ] = 2 ; f [ -3 + KEY ] = 1 ;</p><h3 id="做完这些以后，最后从-pos-1-走一遍到-n-正着走。和上边一样，记录-sum-值。不过这次得多一个步骤——每次要找-pos-左边的对应值。"><a href="#做完这些以后，最后从-pos-1-走一遍到-n-正着走。和上边一样，记录-sum-值。不过这次得多一个步骤——每次要找-pos-左边的对应值。" class="headerlink" title="做完这些以后，最后从 (pos + 1) 走一遍到 n ,正着走。和上边一样，记录 sum 值。不过这次得多一个步骤——每次要找 pos 左边的对应值。"></a>做完这些以后，最后从 (pos + 1) 走一遍到 n ,正着走。和上边一样，记录 sum 值。不过这次得多一个步骤——每次要找 pos 左边的对应值。</h3><p>从 pos 向右</p><ol><li><p>sum=1 -&gt; 左边 sum=-1 -&gt; 两次 ∴ ans+=2;</p></li><li><p>sum=0 -&gt; 左边 sum=0 -&gt; 无</p></li><li><p>sum=1 -&gt; 左边 sum=-1 -&gt; 两次 ∴ ans+=2;</p></li></ol><h3 id="最后输出-ans-即可。"><a href="#最后输出-ans-即可。" class="headerlink" title="最后输出 ans 即可。"></a>最后输出 ans 即可。</h3><p>C++ 代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;//头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;//头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="comment">//命名空间</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY 100001<span class="comment">//定义一个足够大的数</span></span></span><br><span class="line"><span class="keyword">int</span> n,b,pos,a[<span class="number">100010</span>],flag[<span class="number">100010</span>],f[<span class="number">200010</span>],s,ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;b);<span class="comment">//输入</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//第一次循环</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">if</span>(a[i]==b) pos=i;<span class="comment">//就是中位数</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;b) flag[i]=<span class="number">1</span>;<span class="comment">//大的标1</span></span><br><span class="line">        <span class="keyword">else</span> flag[i]=<span class="number">-1</span>;<span class="comment">//小的标-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=pos<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;<span class="comment">//第二次循环</span></span><br><span class="line">        s+=flag[i];<span class="comment">//计算此次sum值</span></span><br><span class="line">        f[s+KEY]++;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="number">0</span>) ans++;<span class="comment">//找到满足题意只在 pos 左侧的连续子序列！</span></span><br><span class="line">    &#125;</span><br><span class="line">    s=<span class="number">0</span>;<span class="comment">//为第三次循环的累加做准备</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=pos+<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//第三次循环</span></span><br><span class="line">        s+=flag[i];<span class="comment">//计算此次sum值</span></span><br><span class="line">        <span class="keyword">if</span>(s==<span class="number">0</span>) ans++;<span class="comment">//找到满足题意只在 pos 右侧的连续子序列！</span></span><br><span class="line">        ans+=f[-s+KEY];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,++ans);<span class="comment">//还少一次只由 pos 自己组成的连续子序列（也满足条件！）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;给出$1-n$的一个排列，统计该排列有多少个长度为奇数的连续子序列的中位数是b。&lt;/p&gt;
&lt;p&gt;对于100%的数据，满足$n \leq 100000,\ 1 \leq b \leq n$。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://tle666.github.io/tags/C/"/>
    
      <category term="题解" scheme="http://tle666.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>并查集入门</title>
    <link href="http://tle666.github.io/2018/10/04/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://tle666.github.io/2018/10/04/并查集/</id>
    <published>2018-10-04T03:21:10.000Z</published>
    <updated>2019-01-27T03:43:34.209Z</updated>
    
    <content type="html"><![CDATA[<p><strong>并查集</strong>是维护集合相关问题的利器！</p><a id="more"></a><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><strong>并查集是个好东西！</strong></p><blockquote><h2 id="它能搞和集合相关的东西……"><a href="#它能搞和集合相关的东西……" class="headerlink" title="它能搞和集合相关的东西……"></a>它能搞和集合相关的东西……</h2><p>常用的有：_最小生成树（$Kruskal$）；判联通块、连通图……_</p></blockquote><hr><p>二话不说，先上代码！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100100</span></span><br><span class="line"><span class="keyword">int</span> n,m,fa[MAXN];</span><br><span class="line"><span class="keyword">bool</span> flag[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123; <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Find</span> <span class="params">(<span class="keyword">int</span> i)</span></span>&#123; <span class="keyword">return</span> (fa[i]==i?i:fa[i]=Find(fa[i]));&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; fa[x]=y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u,v; init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        <span class="keyword">if</span>(Find(u)!=Find(v)) Union(Find(u),Find(v));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$Find()$函数是路径压缩，<del>不用理解，以后自然会懂</del></p><p>$Union()$是将两个队列合到一起。</p><p>E.G. 数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 2</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br></pre></td></tr></table></figure><ul><li><ol><li>将1, 2所在的集合合并</li><li>$Find(1)=2, Find(2)=2, Find(3)=3$</li></ol></li><li><ol><li>将2, 3所在的集合合并</li><li>$Find(1)=3, Find(2)=3, Find(3)=3$ ——&gt;&gt; 路径压缩</li></ol></li></ul><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="修复公路"><a href="#修复公路" class="headerlink" title="修复公路"></a><a href="https://www.luogu.org/problemnew/show/P1111" target="_blank" rel="noopener">修复公路</a></h3><p>最小生成树模板题！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1010</span></span><br><span class="line"><span class="keyword">int</span> n,m,ans,fa[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="comment">//所有的边（图）</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> edge &amp;x)&#123;</span><br><span class="line">        <span class="keyword">return</span> w&lt;x.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[MAXN*MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123; <span class="keyword">return</span> !fa[i]?i:fa[i]=Find(fa[i]);&#125;<span class="comment">//并查集部分</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; fa[x]=y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;e[i].u,&amp;e[i].v,&amp;e[i].w);</span><br><span class="line">    sort(e+<span class="number">1</span>,e+m+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">if</span>(Find(e[i].u)!=Find(e[i].v))&#123;<span class="comment">//最小生成树 Kruskal</span></span><br><span class="line">            ans=e[i].w;</span><br><span class="line">            Union(Find(e[i].u),Find(e[i].v));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(Find(i)!=Find(j))&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;并查集&lt;/strong&gt;是维护集合相关问题的利器！&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://tle666.github.io/tags/C/"/>
    
      <category term="算法讲解" scheme="http://tle666.github.io/tags/%E7%AE%97%E6%B3%95%E8%AE%B2%E8%A7%A3/"/>
    
      <category term="并查集" scheme="http://tle666.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
</feed>
